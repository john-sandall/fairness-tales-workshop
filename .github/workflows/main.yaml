name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  python:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create virtualenv
        run: |
          which python
          python -m venv venv
          source venv/bin/activate
          which python

      - name: Set up Poetry cache
        uses: actions/cache@v4.2.2
        with:
          path: venv
          key: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install Poetry
        run: |
          export POETRY_HOME=/opt/poetry
          echo "POETRY_HOME=/opt/poetry" >> $GITHUB_ENV
          python3 -m venv $POETRY_HOME
          $POETRY_HOME/bin/pip install --requirement=./.github/workflows/requirements.txt
          $POETRY_HOME/bin/poetry --version
          mkdir -p $HOME/.local/bin
          ln -s $POETRY_HOME/bin/poetry $HOME/.local/bin/poetry
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Install python deps
        run: |
          poetry --version
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.create false
          poetry config virtualenvs.path venv
          source venv/bin/activate
          which python
          poetry install --extras dev

      - name: Compute pre-commit cache key
        id: pre-commit-cache
        shell: python
        env:
          RUNNER_OS: ${{ runner.os }}
        run: |
          import hashlib
          import sys
          import os
          python = f"py{sys.version_info.major}.{sys.version_info.minor}"
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = f"{os.environ['RUNNER_OS']}-{python}-{digest[:8]}-pre-commit"
          with open(os.environ["GITHUB_OUTPUT"], mode="a", encoding="utf8") as f:
              f.write(f"result={result}")

      - name: Restore pre-commit cache
        uses: actions/cache@v4.2.2
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-

      - name: pre-commit
        run: |
          source venv/bin/activate
          pre-commit run --hook-stage=manual --show-diff-on-failure --all-files

      # - name: mypy
      #   run: mypy .

      # - name: pytest
      #   # run: pytest --junitxml=junit.xml --cov --cov-report=term-missing:skip-covered --cov-report=xml
      #   run: |
      #     source venv/bin/activate
      #     pytest
